import logging
import asyncio
import os
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# Vypnutie verbose logov
logging.basicConfig(level=logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)

# Konfigur√°cia
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7511593743:AAGsPG2FG9_QC-ynD85hHHptE29-P5KiBMQ')
CHANNEL_ID = os.environ.get('CHANNEL_ID', '-1002827606573')
ADMIN_ID = int(os.environ.get('ADMIN_ID', '7626888184'))
PORT = int(os.environ.get('PORT', 8080))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')

async def send_ticket(context: ContextTypes.DEFAULT_TYPE, chat_id: str, match_data: dict):
    """Odo≈°le tiket do kan√°la"""
    try:
        image_path = 'Volejbal - sablona.png'
        
        # Vytvorenie inline kl√°vesnice s buttonom pre anal√Ωzu
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ STAV TERAZ!", url=match_data['betting_url'])],
            [InlineKeyboardButton("üìä ANAL√ùZA", callback_data="show_analysis")]
        ])
        
        # Popis tiketu
        caption = (f"üèÜ {match_data['team1']} vs {match_data['team2']}\n"
                  f"‚öΩ {match_data['tournament']}\n"
                  f"üïò {match_data['time']}\n\n"
                  f"üéØ {match_data['pick']}\n"
                  f"üí∞ Kurz: {match_data['odds']}")
        
        # Odoslanie obr√°zka
        with open(image_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                reply_markup=keyboard
            )
        
    except FileNotFoundError:
        await context.bot.send_message(chat_id, "‚ùå Obr√°zok tiketu nebol n√°jden√Ω! Ulo≈æte obr√°zok ako 'ticket_image.png'")
    except Exception as e:
        print(f"Chyba pri odosielan√≠ tiketu: {e}")
        await context.bot.send_message(chat_id, "Nastala chyba pri odosielan√≠ tiketu.")

# Pr√≠klad d√°t z√°pasu
example_match = {
    'team1': 'CHELSEA',
    'team2': 'PARIS SAINT-GERMAIN',
    'tournament': 'FIFA Club World Cup',
    'time': '21:00',
    'pick': 'PSG To Win + Over 1.5 Total Goals - 1u',
    'odds': '1.93',
    'betting_url': 'https://your-betting-site.com/bet/12345'
}

# Tu si m√¥≈æete nap√≠sa≈• svoju anal√Ωzu (a≈æ 4096 znakov)
analysis_text = """üìä **PODROBN√Å ANAL√ùZA**

üîç **Forma t√≠mov:**
‚Ä¢ Chelsea: 3 v√Ωhry z posledn√Ωch 5 z√°pasov
‚Ä¢ PSG: 4 v√Ωhry z posledn√Ωch 5 z√°pasov

‚öΩ **≈†tatistiky:**
‚Ä¢ Chelsea strelila 12 g√≥lov v posledn√Ωch 5 z√°pasoch
‚Ä¢ PSG m√° priemer 2.3 g√≥la na z√°pas doma
‚Ä¢ Posledn√© 3 vz√°jomn√© z√°pasy mali Over 2.5 g√≥lov

üéØ **D√¥vod tipu:**
PSG m√° lep≈°iu ofenz√≠vu a doma s√∫ veƒæmi siln√≠. Chelsea m√° probl√©my v obrane. Oƒçak√°vame atrakt√≠vny z√°pas s minim√°lne 2 g√≥lmi.

üìà **ƒéal≈°ie faktory:**
‚Ä¢ PSG je bez zranen√Ωch hr√°ƒçov
‚Ä¢ Chelsea cestuje po n√°roƒçnom z√°pase
‚Ä¢ Dom√°ce prostredie favorizuje PSG
‚Ä¢ Oba t√≠my potrebuj√∫ v√≠≈•azstvo

üí° **Confidence:** 8/10

üé≤ **Alternat√≠vne tipy:**
‚Ä¢ PSG Win: 1.75
‚Ä¢ BTTS Yes: 1.65
‚Ä¢ Over 2.5: 1.80"""

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Obsluha kliknut√≠ na button ANAL√ùZA"""
    query = update.callback_query
    
    if query.data == "show_analysis":
        try:
            # Potvrd√≠ kliknutie
            await query.answer("üìä Anal√Ωza sa naƒç√≠tava...")
            
            # Po≈°le dlh√∫ anal√Ωzu ako s√∫kromn√∫ spr√°vu
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=analysis_text,
                parse_mode='Markdown'
            )
            print(f"Anal√Ωza odoslan√° u≈æ√≠vateƒæovi: {query.from_user.first_name}")
            
        except Exception as e:
            print(f"Chyba pri odosielan√≠ anal√Ωzy: {e}")
            await query.answer("‚ùå Chyba pri naƒç√≠tan√≠ anal√Ωzy")

def is_admin(user_id):
    """Kontrola ƒçi je u≈æ√≠vateƒæ administr√°tor"""
    return user_id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Obsluha pr√≠kazu /start"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå Nem√°te opr√°vnenie pou≈æ√≠va≈• tohto bota.")
        return
    
    await update.message.reply_text(
        f'Vitajte v Sports Tips Bot! üèÜ\n'
        f'Va≈°e ID: {user_id}\n\n'
        'Pr√≠kazy:\n'
        '/tiket - Odosla≈• tiket do kan√°la\n'
        '/help - Zobraz√≠ n√°povedu'
    )

async def tiket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Obsluha pr√≠kazu /tiket"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå Nem√°te opr√°vnenie pou≈æ√≠va≈• tohto bota.")
        return
    
    try:
        # Odo≈°le tiket do kan√°la
        await send_ticket(context, CHANNEL_ID, example_match)
        
        # Potvrd√≠ odoslanie u≈æ√≠vateƒæovi
        await update.message.reply_text('‚úÖ Tiket bol odoslan√Ω do kan√°la!')
        
    except Exception as e:
        print(f"Chyba pri odosielan√≠: {e}")
        await update.message.reply_text(f'‚ùå Chyba pri odosielan√≠ tiketu: {str(e)}')

async def test_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Test pr√≠stupu do kan√°la"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå Nem√°te opr√°vnenie pou≈æ√≠va≈• tohto bota.")
        return
    
    try:
        # Pokus o z√≠skanie inform√°ci√≠ o kan√°li
        chat = await context.bot.get_chat(CHANNEL_ID)
        await update.message.reply_text(
            f"‚úÖ Bot m√° pr√≠stup do kan√°la!\n"
            f"N√°zov: {chat.title}\n"
            f"ID: {chat.id}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå Bot nem√° pr√≠stup do kan√°la!\n"
            f"Chyba: {str(e)}\n\n"
            f"Skontrolujte:\n"
            f"1. Bot je pridan√Ω do kan√°la\n"
            f"2. Bot m√° pr√°va administr√°tora\n"
            f"3. Bot m√° pr√°vo posiela≈• spr√°vy"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Obsluha pr√≠kazu /help"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå Nem√°te opr√°vnenie pou≈æ√≠va≈• tohto bota.")
        return
    
    await update.message.reply_text(
        'Dostupn√© pr√≠kazy:\n'
        '/start - Spustenie bota\n'
        '/tiket - Odoslanie tiketu do kan√°la\n'
        '/test - Test pr√≠stupu do kan√°la\n'
        '/help - N√°poveda'
    )

def main():
    """Spustenie bota"""
    # Vytvorenie aplik√°cie
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Registr√°cia handlerov
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tiket", tiket))
    application.add_handler(CommandHandler("test", test_channel))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))  # Pre button ANAL√ùZA
    
    # Spustenie bota
    if WEBHOOK_URL:
        # Webhook pre Render
        print("Sp√∫≈°≈•am webhook...")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"{WEBHOOK_URL}/webhook",
            secret_token="your-secret-token"
        )
    else:
        # Polling pre lok√°lne testovanie
        print("Bot je spusten√Ω...")
        application.run_polling()

if __name__ == '__main__':
    main()
